# HIS Patient Service - Complete Source Code Structure
Generated: Mo 11 Aug 2025 23:28:52 CEST
Project: Hospital Information System (HIS) - Patient Service
=========================================================

## Directory Structure
```
./.mvn/wrapper/maven-wrapper.properties
./Dockerfile
./pom.xml
./src/main/java/de/his/patient/application/dto/AddressResponse.java
./src/main/java/de/his/patient/application/dto/CreateAddressRequest.java
./src/main/java/de/his/patient/application/dto/CreatePatientRequest.java
./src/main/java/de/his/patient/application/dto/PatientResponse.java
./src/main/java/de/his/patient/application/dto/PatientSummary.java
./src/main/java/de/his/patient/application/dto/UpdatePatientRequest.java
./src/main/java/de/his/patient/application/mapper/PatientMapper.java
./src/main/java/de/his/patient/application/service/PatientService.java
./src/main/java/de/his/patient/application/service/VSDMIntegrationService.java
./src/main/java/de/his/patient/config/DatabaseConfig.java
./src/main/java/de/his/patient/config/OpenApiConfig.java
./src/main/java/de/his/patient/config/SecurityConfig.java
./src/main/java/de/his/patient/config/WebConfig.java
./src/main/java/de/his/patient/domain/model/AbstractEntity.java
./src/main/java/de/his/patient/domain/model/Address.java
./src/main/java/de/his/patient/domain/model/AddressType.java
./src/main/java/de/his/patient/domain/model/Gender.java
./src/main/java/de/his/patient/domain/model/InsuranceStatus.java
./src/main/java/de/his/patient/domain/model/InsuranceType.java
./src/main/java/de/his/patient/domain/model/Patient.java
./src/main/java/de/his/patient/domain/model/Person.java
./src/main/java/de/his/patient/domain/model/VSDMData.java
./src/main/java/de/his/patient/domain/repository/PatientRepository.java
./src/main/java/de/his/patient/infrastructure/exception/DatabaseConnectionException.java
./src/main/java/de/his/patient/infrastructure/exception/GlobalExceptionHandler.java
./src/main/java/de/his/patient/infrastructure/exception/InvalidKvnrException.java
./src/main/java/de/his/patient/infrastructure/exception/PatientAlreadyExistsException.java
./src/main/java/de/his/patient/infrastructure/exception/PatientDataIntegrityException.java
./src/main/java/de/his/patient/infrastructure/exception/PatientDeletedException.java
./src/main/java/de/his/patient/infrastructure/exception/PatientNotFoundException.java
./src/main/java/de/his/patient/infrastructure/exception/PatientServiceUnavailableException.java
./src/main/java/de/his/patient/infrastructure/exception/PatientValidationException.java
./src/main/java/de/his/patient/infrastructure/exception/UnauthorizedPatientAccessException.java
./src/main/java/de/his/patient/PatientServiceApplication.java
./src/main/java/de/his/patient/presentation/controller/PatientController.java
./src/main/resources/application-dev.yml
./src/main/resources/application-docker-minimal.yml
./src/main/resources/application-docker.yml
./src/main/resources/application.yml
./src/main/resources/db/changelog/001-create-persons-table.xml
./src/main/resources/db/changelog/002-create-patients-table.xml
./src/main/resources/db/changelog/003-create-addresses-table.xml
./src/main/resources/db/changelog/004-create-indexes.xml
./src/main/resources/db/changelog/db.changelog-master.xml
./src/main/resources/liquibase.properties
./src/test/java/de/his/patient/application/service/PatientServiceTest.java
./src/test/java/de/his/patient/domain/model/PatientTest.java
./src/test/java/de/his/patient/integration/PatientIntegrationTest.java
```

## Tree Structure
```
.
├── create_java.sh
├── Dockerfile
├── logs
├── mvnw
├── mvnw.cmd
├── Patient Service-source.txt
├── pom.xml
├── pom.xml.tmp
├── scripts
│   └── test
│       └── test-exceptions.sh
└── src
    ├── main
    │   ├── java
    │   │   └── de
    │   │       └── his
    │   │           └── patient
    │   │               ├── application
    │   │               │   ├── dto
    │   │               │   │   ├── AddressResponse.java
    │   │               │   │   ├── CreateAddressRequest.java
    │   │               │   │   ├── CreatePatientRequest.java
    │   │               │   │   ├── PatientResponse.java
    │   │               │   │   ├── PatientSummary.java
    │   │               │   │   └── UpdatePatientRequest.java
    │   │               │   ├── mapper
    │   │               │   │   └── PatientMapper.java
    │   │               │   └── service
    │   │               │       ├── PatientService.java
    │   │               │       └── VSDMIntegrationService.java
    │   │               ├── config
    │   │               │   ├── DatabaseConfig.java
    │   │               │   ├── OpenApiConfig.java
    │   │               │   ├── SecurityConfig.java
    │   │               │   └── WebConfig.java
    │   │               ├── domain
    │   │               │   ├── model
    │   │               │   │   ├── AbstractEntity.java
    │   │               │   │   ├── Address.java
    │   │               │   │   ├── AddressType.java
    │   │               │   │   ├── Gender.java
    │   │               │   │   ├── InsuranceStatus.java
    │   │               │   │   ├── InsuranceType.java
    │   │               │   │   ├── Patient.java
    │   │               │   │   ├── Person.java
    │   │               │   │   └── VSDMData.java
    │   │               │   └── repository
    │   │               │       └── PatientRepository.java
    │   │               ├── infrastructure
    │   │               │   └── exception
    │   │               │       ├── DatabaseConnectionException.java
    │   │               │       ├── GlobalExceptionHandler.java
    │   │               │       ├── InvalidKvnrException.java
    │   │               │       ├── PatientAlreadyExistsException.java
    │   │               │       ├── PatientDataIntegrityException.java
    │   │               │       ├── PatientDeletedException.java
    │   │               │       ├── PatientNotFoundException.java
    │   │               │       ├── PatientServiceUnavailableException.java
    │   │               │       ├── PatientValidationException.java
    │   │               │       └── UnauthorizedPatientAccessException.java
    │   │               ├── PatientServiceApplication.java
    │   │               └── presentation
    │   │                   └── controller
    │   │                       └── PatientController.java
    │   └── resources
    │       ├── application-dev.yml
    │       ├── application-docker-minimal.yml
    │       ├── application-docker.yml
    │       ├── application.yml
    │       ├── db
    │       │   └── changelog
    │       │       ├── 001-create-persons-table.xml
    │       │       ├── 002-create-patients-table.xml
    │       │       ├── 003-create-addresses-table.xml
    │       │       ├── 004-create-indexes.xml
    │       │       └── db.changelog-master.xml
    │       ├── liquibase.properties
    │       ├── static
    │       └── templates
    └── test
        ├── java
        │   └── de
        │       └── his
        │           └── patient
        │               ├── application
        │               │   └── service
        │               │       └── PatientServiceTest.java
        │               ├── domain
        │               │   ├── model
        │               │   │   └── PatientTest.java
        │               │   └── repository
        │               ├── integration
        │               │   └── PatientIntegrationTest.java
        │               └── presentation
        │                   └── controller
        └── resources

41 directories, 56 files
```

## Source Code Files

### File: ./src/main/java/de/his/patient/application/dto/AddressResponse.java
```java
// src/main/java/de/his/patient/application/dto/AddressResponse.java
package de.his.patient.application.dto;

import de.his.patient.domain.model.AddressType;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.UUID;

@Schema(description = "Address information")
public class AddressResponse {

    @Schema(description = "Address ID")
    private UUID id;

    @Schema(description = "Address type")
    private AddressType addressType;

    @Schema(description = "Street name")
    private String street;

    @Schema(description = "House number")
    private String houseNumber;

    @Schema(description = "Postal code")
    private String postalCode;

    @Schema(description = "City")
    private String city;

    @Schema(description = "State")
    private String state;

    @Schema(description = "Country")
    private String country;

    // Constructor
    public AddressResponse(UUID id, AddressType addressType, String street,
            String houseNumber, String postalCode, String city,
            String state, String country) {
        this.id = id;
        this.addressType = addressType;
        this.street = street;
        this.houseNumber = houseNumber;
        this.postalCode = postalCode;
        this.city = city;
        this.state = state;
        this.country = country;
    }

    // Getters and Setters
    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public AddressType getAddressType() {
        return addressType;
    }

    public void setAddressType(AddressType addressType) {
        this.addressType = addressType;
    }

    public String getStreet() {
        return street;
    }

    public void setStreet(String street) {
        this.street = street;
    }

    public String getHouseNumber() {
        return houseNumber;
    }

    public void setHouseNumber(String houseNumber) {
        this.houseNumber = houseNumber;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getFullAddress() {
        StringBuilder fullAddress = new StringBuilder();
        if (street != null)
            fullAddress.append(street);
        if (houseNumber != null)
            fullAddress.append(" ").append(houseNumber);
        if (postalCode != null || city != null) {
            fullAddress.append(", ");
            if (postalCode != null)
                fullAddress.append(postalCode).append(" ");
            if (city != null)
                fullAddress.append(city);
        }
        return fullAddress.toString();
    }
}

```

### File: ./src/main/java/de/his/patient/application/dto/CreateAddressRequest.java
```java
// src/main/java/de/his/patient/application/dto/CreateAddressRequest.java
package de.his.patient.application.dto;

import de.his.patient.domain.model.AddressType;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;

@Schema(description = "Request to create an address")
public class CreateAddressRequest {

    @NotNull(message = "Address type is required")
    @Schema(description = "Type of address")
    private AddressType addressType;

    @Schema(description = "Street name", example = "Musterstraße")
    private String street;

    @Schema(description = "House number", example = "123")
    private String houseNumber;

    @Schema(description = "Postal code", example = "80331")
    private String postalCode;

    @Schema(description = "City", example = "München")
    private String city;

    @Schema(description = "State", example = "Bayern")
    private String state;

    @Schema(description = "Country", example = "Deutschland")
    private String country;

    // Constructors
    public CreateAddressRequest() {
    }

    // Getters and Setters
    public AddressType getAddressType() {
        return addressType;
    }

    public void setAddressType(AddressType addressType) {
        this.addressType = addressType;
    }

    public String getStreet() {
        return street;
    }

    public void setStreet(String street) {
        this.street = street;
    }

    public String getHouseNumber() {
        return houseNumber;
    }

    public void setHouseNumber(String houseNumber) {
        this.houseNumber = houseNumber;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }
}

```

### File: ./src/main/java/de/his/patient/application/dto/CreatePatientRequest.java
```java
package de.his.patient.application.dto;

import de.his.patient.domain.model.Gender;
import de.his.patient.domain.model.InsuranceType;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;

import java.time.LocalDate;
import java.util.List;

@Schema(description = "Request to create a new patient")
public class CreatePatientRequest {

    @NotBlank(message = "First name is required")
    @Schema(description = "Patient's first name", example = "Max")
    private String firstName;

    @NotBlank(message = "Last name is required")
    @Schema(description = "Patient's last name", example = "Mustermann")
    private String lastName;

    @Schema(description = "Patient's title", example = "Dr.")
    private String title;

    @NotNull(message = "Birth date is required")
    @Schema(description = "Patient's birth date", example = "1985-03-15")
    private LocalDate birthDate;

    @NotNull(message = "Gender is required")
    @Schema(description = "Patient's gender")
    private Gender gender;

    @NotBlank(message = "KVNR is required")
    @Pattern(regexp = "^[A-Z][0-9]{9}$", message = "KVNR must be 1 letter followed by 9 digits")
    @Schema(description = "Krankenversichertennummer", example = "A123456789")
    private String kvnr;

    @Schema(description = "Insurance number", example = "1234567890")
    private String insuranceNumber;

    @Schema(description = "Type of insurance")
    private InsuranceType insuranceType;

    @Schema(description = "Insurance company ID", example = "104212059")
    private String insuranceCompanyId;

    @Schema(description = "Insurance company name", example = "AOK Bayern")
    private String insuranceCompanyName;

    @Schema(description = "Phone number", example = "+49 89 12345678")
    private String phone;

    @Email(message = "Email must be valid")
    @Schema(description = "Email address", example = "max.mustermann@email.com")
    private String email;

    @Schema(description = "Consent for communication", example = "true")
    private Boolean consentCommunication;

    @Schema(description = "Consent for data processing", example = "true")
    private Boolean consentDataProcessing;

    public CreatePatientRequest() {}

    // Getters and Setters
    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }

    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }

    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }

    public LocalDate getBirthDate() { return birthDate; }
    public void setBirthDate(LocalDate birthDate) { this.birthDate = birthDate; }

    public Gender getGender() { return gender; }
    public void setGender(Gender gender) { this.gender = gender; }

    public String getKvnr() { return kvnr; }
    public void setKvnr(String kvnr) { this.kvnr = kvnr; }

    public String getInsuranceNumber() { return insuranceNumber; }
    public void setInsuranceNumber(String insuranceNumber) { this.insuranceNumber = insuranceNumber; }

    public InsuranceType getInsuranceType() { return insuranceType; }
    public void setInsuranceType(InsuranceType insuranceType) { this.insuranceType = insuranceType; }

    public String getInsuranceCompanyId() { return insuranceCompanyId; }
    public void setInsuranceCompanyId(String insuranceCompanyId) { this.insuranceCompanyId = insuranceCompanyId; }

    public String getInsuranceCompanyName() { return insuranceCompanyName; }
    public void setInsuranceCompanyName(String insuranceCompanyName) { this.insuranceCompanyName = insuranceCompanyName; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public Boolean getConsentCommunication() { return consentCommunication; }
    public void setConsentCommunication(Boolean consentCommunication) { this.consentCommunication = consentCommunication; }

    public Boolean getConsentDataProcessing() { return consentDataProcessing; }
    public void setConsentDataProcessing(Boolean consentDataProcessing) { this.consentDataProcessing = consentDataProcessing; }
}

```

### File: ./src/main/java/de/his/patient/application/dto/PatientResponse.java
```java
package de.his.patient.application.dto;

import de.his.patient.domain.model.Gender;
import de.his.patient.domain.model.InsuranceStatus;
import de.his.patient.domain.model.InsuranceType;
import io.swagger.v3.oas.annotations.media.Schema;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Schema(description = "Complete patient information")
public class PatientResponse {

    @Schema(description = "Patient ID")
    private UUID id;

    @Schema(description = "Patient's first name")
    private String firstName;

    @Schema(description = "Patient's last name")
    private String lastName;

    @Schema(description = "Patient's title")
    private String title;

    @Schema(description = "Patient's birth date")
    private LocalDate birthDate;

    @Schema(description = "Patient's gender")
    private Gender gender;

    @Schema(description = "Krankenversichertennummer")
    private String kvnr;

    @Schema(description = "Insurance number")
    private String insuranceNumber;

    @Schema(description = "Insurance status")
    private InsuranceStatus insuranceStatus;

    @Schema(description = "Insurance type")
    private InsuranceType insuranceType;

    @Schema(description = "Insurance company ID")
    private String insuranceCompanyId;

    @Schema(description = "Insurance company name")
    private String insuranceCompanyName;

    @Schema(description = "Phone number")
    private String phone;

    @Schema(description = "Email address")
    private String email;

    @Schema(description = "Consent for communication")
    private Boolean consentCommunication;

    @Schema(description = "Consent for data processing")
    private Boolean consentDataProcessing;

    @Schema(description = "Creation timestamp")
    private LocalDateTime createdAt;

    @Schema(description = "Last update timestamp")
    private LocalDateTime updatedAt;

    public PatientResponse() {}

    public PatientResponse(UUID id, String firstName, String lastName, String title,
                          LocalDate birthDate, Gender gender, String kvnr,
                          String insuranceNumber, InsuranceStatus insuranceStatus,
                          InsuranceType insuranceType, String insuranceCompanyId,
                          String insuranceCompanyName, String phone, String email,
                          Boolean consentCommunication, Boolean consentDataProcessing,
                          LocalDateTime createdAt, LocalDateTime updatedAt) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.title = title;
        this.birthDate = birthDate;
        this.gender = gender;
        this.kvnr = kvnr;
        this.insuranceNumber = insuranceNumber;
        this.insuranceStatus = insuranceStatus;
        this.insuranceType = insuranceType;
        this.insuranceCompanyId = insuranceCompanyId;
        this.insuranceCompanyName = insuranceCompanyName;
        this.phone = phone;
        this.email = email;
        this.consentCommunication = consentCommunication;
        this.consentDataProcessing = consentDataProcessing;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    // Getters and Setters
    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }

    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }

    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }

    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }

    public LocalDate getBirthDate() { return birthDate; }
    public void setBirthDate(LocalDate birthDate) { this.birthDate = birthDate; }

    public Gender getGender() { return gender; }
    public void setGender(Gender gender) { this.gender = gender; }

    public String getKvnr() { return kvnr; }
    public void setKvnr(String kvnr) { this.kvnr = kvnr; }

    public String getInsuranceNumber() { return insuranceNumber; }
    public void setInsuranceNumber(String insuranceNumber) { this.insuranceNumber = insuranceNumber; }

    public InsuranceStatus getInsuranceStatus() { return insuranceStatus; }
    public void setInsuranceStatus(InsuranceStatus insuranceStatus) { this.insuranceStatus = insuranceStatus; }

    public InsuranceType getInsuranceType() { return insuranceType; }
    public void setInsuranceType(InsuranceType insuranceType) { this.insuranceType = insuranceType; }

    public String getInsuranceCompanyId() { return insuranceCompanyId; }
    public void setInsuranceCompanyId(String insuranceCompanyId) { this.insuranceCompanyId = insuranceCompanyId; }

    public String getInsuranceCompanyName() { return insuranceCompanyName; }
    public void setInsuranceCompanyName(String insuranceCompanyName) { this.insuranceCompanyName = insuranceCompanyName; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public Boolean getConsentCommunication() { return consentCommunication; }
    public void setConsentCommunication(Boolean consentCommunication) { this.consentCommunication = consentCommunication; }

    public Boolean getConsentDataProcessing() { return consentDataProcessing; }
    public void setConsentDataProcessing(Boolean consentDataProcessing) { this.consentDataProcessing = consentDataProcessing; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }

    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }

    public String getFullName() {
        StringBuilder fullName = new StringBuilder();
        if (title != null && !title.isEmpty()) {
            fullName.append(title).append(" ");
        }
        fullName.append(firstName).append(" ").append(lastName);
        return fullName.toString();
    }
}

```

### File: ./src/main/java/de/his/patient/application/dto/PatientSummary.java
```java
// src/main/java/de/his/patient/application/dto/PatientSummary.java
package de.his.patient.application.dto;

import de.his.patient.domain.model.Gender;
import de.his.patient.domain.model.InsuranceStatus;
import io.swagger.v3.oas.annotations.media.Schema;

import java.time.LocalDate;
import java.util.UUID;

@Schema(description = "Summary view of patient for lists")
public class PatientSummary {

    @Schema(description = "Patient ID")
    private UUID id;

    @Schema(description = "Patient's full name")
    private String fullName;

    @Schema(description = "Patient's birth date")
    private LocalDate birthDate;

    @Schema(description = "Patient's gender")
    private Gender gender;

    @Schema(description = "Krankenversichertennummer")
    private String kvnr;

    @Schema(description = "Insurance status")
    private InsuranceStatus insuranceStatus;

    @Schema(description = "Insurance company name")
    private String insuranceCompanyName;

    // Constructor
    public PatientSummary(UUID id, String fullName, LocalDate birthDate,
            Gender gender, String kvnr, InsuranceStatus insuranceStatus,
            String insuranceCompanyName) {
        this.id = id;
        this.fullName = fullName;
        this.birthDate = birthDate;
        this.gender = gender;
        this.kvnr = kvnr;
        this.insuranceStatus = insuranceStatus;
        this.insuranceCompanyName = insuranceCompanyName;
    }

    // Getters and Setters
    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public LocalDate getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(LocalDate birthDate) {
        this.birthDate = birthDate;
    }

    public Gender getGender() {
        return gender;
    }

    public void setGender(Gender gender) {
        this.gender = gender;
    }

    public String getKvnr() {
        return kvnr;
    }

    public void setKvnr(String kvnr) {
        this.kvnr = kvnr;
    }

    public InsuranceStatus getInsuranceStatus() {
        return insuranceStatus;
    }

    public void setInsuranceStatus(InsuranceStatus insuranceStatus) {
        this.insuranceStatus = insuranceStatus;
    }

    public String getInsuranceCompanyName() {
        return insuranceCompanyName;
    }

    public void setInsuranceCompanyName(String insuranceCompanyName) {
        this.insuranceCompanyName = insuranceCompanyName;
    }
}

```

### File: ./src/main/java/de/his/patient/application/dto/UpdatePatientRequest.java
```java
package de.his.patient.application.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;

@Schema(description = "Request to update patient information")
public class UpdatePatientRequest {

    @Schema(description = "Patient's first name", example = "Max")
    private String firstName;

    @Schema(description = "Patient's last name", example = "Mustermann")
    private String lastName;

    @Schema(description = "Patient's title", example = "Dr.")
    private String title;

    @Schema(description = "Phone number", example = "+49 89 12345678")
    private String phone;

    @Email(message = "Email must be valid")
    @Schema(description = "Email address", example = "max.mustermann@email.com")
    private String email;

    @Schema(description = "Consent for communication", example = "true")
    private Boolean consentCommunication;

    @Schema(description = "Consent for data processing", example = "true")
    private Boolean consentDataProcessing;

    public UpdatePatientRequest() {}

    // Getters and Setters
    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }

    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }

    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public Boolean getConsentCommunication() { return consentCommunication; }
    public void setConsentCommunication(Boolean consentCommunication) { this.consentCommunication = consentCommunication; }

    public Boolean getConsentDataProcessing() { return consentDataProcessing; }
    public void setConsentDataProcessing(Boolean consentDataProcessing) { this.consentDataProcessing = consentDataProcessing; }
}

```

### File: ./src/main/java/de/his/patient/application/mapper/PatientMapper.java
```java
package de.his.patient.application.mapper;

import org.springframework.stereotype.Component;

@Component
public class PatientMapper {
    // Temporarily empty - logic moved to PatientService
}

```

### File: ./src/main/java/de/his/patient/application/service/PatientService.java
```java
package de.his.patient.application.service;

import de.his.patient.application.dto.*;
import de.his.patient.domain.model.Patient;
import de.his.patient.domain.repository.PatientRepository;
import de.his.patient.infrastructure.exception.PatientNotFoundException;
import de.his.patient.infrastructure.exception.PatientAlreadyExistsException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.UUID;

@Service
@Transactional
public class PatientService {

    private static final Logger logger = LoggerFactory.getLogger(PatientService.class);

    private final PatientRepository patientRepository;

    public PatientService(PatientRepository patientRepository) {
        this.patientRepository = patientRepository;
    }

    @Transactional
    public PatientResponse createPatient(CreatePatientRequest request) {
        logger.info("Creating new patient with KVNR {}", request.getKvnr());

        // Check if patient with KVNR already exists
        if (patientRepository.findByKvnrAndDeletedAtIsNull(request.getKvnr()).isPresent()) {
            throw new PatientAlreadyExistsException(request.getKvnr());
        }

        Patient patient = new Patient(
            request.getFirstName(),
            request.getLastName(),
            request.getBirthDate(),
            request.getGender(),
            request.getKvnr()
        );

        // Set additional fields
        patient.setTitle(request.getTitle());
        patient.setInsuranceNumber(request.getInsuranceNumber());
        patient.setInsuranceType(request.getInsuranceType());
        patient.setInsuranceCompanyId(request.getInsuranceCompanyId());
        patient.setInsuranceCompanyName(request.getInsuranceCompanyName());
        patient.setPhone(request.getPhone());
        patient.setEmail(request.getEmail());
        patient.setConsentCommunication(request.getConsentCommunication());
        patient.setConsentDataProcessing(request.getConsentDataProcessing());

        patient = patientRepository.save(patient);
        
        logger.info("Created patient {} with KVNR {}", patient.getId(), request.getKvnr());

        return mapToResponse(patient);
    }

    @Transactional(readOnly = true)
    public PatientResponse getPatient(UUID patientId) {
        Patient patient = getPatientEntity(patientId);
        return mapToResponse(patient);
    }

    @Transactional(readOnly = true)
    public PatientResponse getPatientByKvnr(String kvnr) {
        Patient patient = patientRepository.findByKvnrAndDeletedAtIsNull(kvnr)
            .orElseThrow(() -> new PatientNotFoundException("KVNR: " + kvnr));
        return mapToResponse(patient);
    }

    @Transactional(readOnly = true)
    public Page<PatientSummary> searchPatients(String searchTerm, Pageable pageable) {
        return patientRepository.searchPatients(searchTerm, pageable)
            .map(this::mapToSummary);
    }

    @Transactional
    public void deletePatient(UUID patientId) {
        Patient patient = getPatientEntity(patientId);
        patient.markAsDeleted();
        
        patientRepository.save(patient);
        logger.info("Soft deleted patient {}", patientId);
    }

    private Patient getPatientEntity(UUID patientId) {
        return patientRepository.findById(patientId)
            .filter(patient -> !patient.isDeleted())
            .orElseThrow(() -> new PatientNotFoundException(patientId.toString()));
    }

    private PatientResponse mapToResponse(Patient patient) {
        return new PatientResponse(
            patient.getId(),
            patient.getFirstName(),
            patient.getLastName(),
            patient.getTitle(),
            patient.getBirthDate(),
            patient.getGender(),
            patient.getKvnr(),
            patient.getInsuranceNumber(),
            patient.getInsuranceStatus(),
            patient.getInsuranceType(),
            patient.getInsuranceCompanyId(),
            patient.getInsuranceCompanyName(),
            patient.getPhone(),
            patient.getEmail(),
            patient.getConsentCommunication(),
            patient.getConsentDataProcessing(),
            patient.getCreatedAt(),
            patient.getUpdatedAt()
        );
    }

    private PatientSummary mapToSummary(Patient patient) {
        return new PatientSummary(
            patient.getId(),
            patient.getFullName(),
            patient.getBirthDate(),
            patient.getGender(),
            patient.getKvnr(),
            patient.getInsuranceStatus(),
            patient.getInsuranceCompanyName()
        );
    }
}

```

### File: ./src/main/java/de/his/patient/application/service/VSDMIntegrationService.java
```java
package de.his.patient.application.service;

import de.his.patient.domain.model.VSDMData;
import de.his.patient.domain.model.InsuranceStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class VSDMIntegrationService {

    private static final Logger logger = LoggerFactory.getLogger(VSDMIntegrationService.class);

    @Value("${vsdm.endpoint:https://vsdm.ti-dienste.de}")
    private String vsdmEndpoint;

    public VSDMData fetchVSDMData(String kvnr) {
        logger.info("Fetching VSDM data for KVNR {}", kvnr);
        
        try {
            // TODO: Implement actual VSDM API call
            // This is a placeholder implementation
            
            // For now, return mock data
            return new VSDMData(
                kvnr,
                InsuranceStatus.ACTIVE,
                "104212059",
                "AOK Bayern",
                "0" // No copayment
            );
            
        } catch (Exception e) {
            logger.error("Failed to fetch VSDM data for KVNR {}", kvnr, e);
            throw new RuntimeException("VSDM service unavailable", e);
        }
    }
}

```

### File: ./src/main/java/de/his/patient/config/DatabaseConfig.java
```java
package de.his.patient.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@EnableJpaRepositories(basePackages = "de.his.patient.domain.repository")
@EnableTransactionManagement
public class DatabaseConfig {
}

```

### File: ./src/main/java/de/his/patient/config/OpenApiConfig.java
```java

```

### File: ./src/main/java/de/his/patient/config/SecurityConfig.java
```java
package de.his.patient.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .headers(headers -> headers
                .frameOptions().sameOrigin()  // Erlaubt H2 Console
            )
            .authorizeHttpRequests(authz -> authz
                .requestMatchers("/h2-console/**").permitAll()  // H2 Console erlauben
                .requestMatchers("/actuator/**").permitAll()    // Actuator erlauben
                .requestMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll()  // Swagger erlauben
                .anyRequest().permitAll()  // Temporary: Allow all requests
            );
            
        return http.build();
    }
}

```

### File: ./src/main/java/de/his/patient/config/WebConfig.java
```java
package de.his.patient.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

@Configuration
public class WebConfig {

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOriginPatterns(Arrays.asList("*"));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("*"));
        configuration.setAllowCredentials(true);
        
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/api/**", configuration);
        return source;
    }
}

```

### File: ./src/main/java/de/his/patient/domain/model/AbstractEntity.java
```java
package de.his.patient.domain.model;

import jakarta.persistence.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.UUID;

@MappedSuperclass
public abstract class AbstractEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "id")
    private UUID id;

    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @Version
    @Column(name = "version")
    private Long version;

    @Column(name = "deleted_at")
    private LocalDateTime deletedAt;

    public AbstractEntity() {}

    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public Long getVersion() { return version; }

    public LocalDateTime getDeletedAt() { return deletedAt; }
    public void setDeletedAt(LocalDateTime deletedAt) { this.deletedAt = deletedAt; }

    public boolean isDeleted() { return deletedAt != null; }

    public void markAsDeleted() {
        this.deletedAt = LocalDateTime.now();
    }
}

```

### File: ./src/main/java/de/his/patient/domain/model/Address.java
```java
package de.his.patient.domain.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;

@Entity
@Table(name = "addresses")
public class Address extends AbstractEntity {

    @NotNull
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "person_id", nullable = false)
    private Person person;

    @Enumerated(EnumType.STRING)
    @Column(name = "address_type", nullable = false, length = 50)
    private AddressType addressType;

    @Column(name = "street", length = 200)
    private String street;

    @Column(name = "house_number", length = 10)
    private String houseNumber;

    @Column(name = "postal_code", length = 10)
    private String postalCode;

    @Column(name = "city", length = 100)
    private String city;

    @Column(name = "state", length = 100)
    private String state;

    @Column(name = "country", length = 50)
    private String country;

    public Address() {}

    public Address(AddressType addressType, String street, String houseNumber,
                   String postalCode, String city, String country) {
        this.addressType = addressType;
        this.street = street;
        this.houseNumber = houseNumber;
        this.postalCode = postalCode;
        this.city = city;
        this.country = country;
    }

    // Getters and Setters
    public Person getPerson() { return person; }
    public void setPerson(Person person) { this.person = person; }

    public AddressType getAddressType() { return addressType; }
    public void setAddressType(AddressType addressType) { this.addressType = addressType; }

    public String getStreet() { return street; }
    public void setStreet(String street) { this.street = street; }

    public String getHouseNumber() { return houseNumber; }
    public void setHouseNumber(String houseNumber) { this.houseNumber = houseNumber; }

    public String getPostalCode() { return postalCode; }
    public void setPostalCode(String postalCode) { this.postalCode = postalCode; }

    public String getCity() { return city; }
    public void setCity(String city) { this.city = city; }

    public String getState() { return state; }
    public void setState(String state) { this.state = state; }

    public String getCountry() { return country; }
    public void setCountry(String country) { this.country = country; }
}

```

### File: ./src/main/java/de/his/patient/domain/model/AddressType.java
```java
package de.his.patient.domain.model;

public enum AddressType {
    HOME,
    WORK,
    POSTAL,
    TEMPORARY,
    OLD
}

```

### File: ./src/main/java/de/his/patient/domain/model/Gender.java
```java
package de.his.patient.domain.model;

public enum Gender {
    MALE("male"),
    FEMALE("female"),
    OTHER("other"),
    UNKNOWN("unknown");

    private final String fhirCode;

    Gender(String fhirCode) {
        this.fhirCode = fhirCode;
    }

    public String getFhirCode() {
        return fhirCode;
    }
}

```

### File: ./src/main/java/de/his/patient/domain/model/InsuranceStatus.java
```java
package de.his.patient.domain.model;

public enum InsuranceStatus {
    ACTIVE,
    INACTIVE,
    SUSPENDED,
    CANCELLED,
    UNKNOWN
}

```

### File: ./src/main/java/de/his/patient/domain/model/InsuranceType.java
```java
package de.his.patient.domain.model;

public enum InsuranceType {
    STATUTORY("GKV"),
    PRIVATE("PKV"),
    SELF_PAYER("Selbstzahler"),
    OTHER("Sonstige");

    private final String description;

    InsuranceType(String description) {
        this.description = description;
    }

    public String getDescription() {
        return description;
    }
}

```

### File: ./src/main/java/de/his/patient/domain/model/Patient.java
```java
package de.his.patient.domain.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import java.time.LocalDate;

@Entity
@Table(name = "patients", indexes = {
        @Index(name = "idx_patient_kvnr", columnList = "kvnr", unique = true),
        @Index(name = "idx_patient_insurance_number", columnList = "insurance_number"),
})
public class Patient extends Person {

    @NotNull
    @Pattern(regexp = "^[A-Z][0-9]{9}$", message = "KVNR must be 1 letter followed by 9 digits")
    @Column(name = "kvnr", nullable = false, unique = true, length = 10)
    private String kvnr;

    @Column(name = "insurance_number", length = 20)
    private String insuranceNumber;

    @Enumerated(EnumType.STRING)
    @Column(name = "insurance_status", length = 50)
    private InsuranceStatus insuranceStatus;

    @Enumerated(EnumType.STRING)
    @Column(name = "insurance_type", length = 50)
    private InsuranceType insuranceType;

    @Column(name = "insurance_company_id")
    private String insuranceCompanyId;

    @Column(name = "insurance_company_name", length = 200)
    private String insuranceCompanyName;

    @Column(name = "consent_communication")
    private Boolean consentCommunication;

    @Column(name = "consent_data_processing")
    private Boolean consentDataProcessing;

    public Patient() {}

    public Patient(String firstName, String lastName, LocalDate birthDate, 
                   Gender gender, String kvnr) {
        super(firstName, lastName, birthDate, gender);
        this.kvnr = kvnr;
        this.insuranceStatus = InsuranceStatus.ACTIVE;
        this.consentCommunication = false;
        this.consentDataProcessing = false;
    }

    // Getters and Setters
    public String getKvnr() { return kvnr; }
    public void setKvnr(String kvnr) { this.kvnr = kvnr; }

    public String getInsuranceNumber() { return insuranceNumber; }
    public void setInsuranceNumber(String insuranceNumber) { this.insuranceNumber = insuranceNumber; }

    public InsuranceStatus getInsuranceStatus() { return insuranceStatus; }
    public void setInsuranceStatus(InsuranceStatus insuranceStatus) { this.insuranceStatus = insuranceStatus; }

    public InsuranceType getInsuranceType() { return insuranceType; }
    public void setInsuranceType(InsuranceType insuranceType) { this.insuranceType = insuranceType; }

    public String getInsuranceCompanyId() { return insuranceCompanyId; }
    public void setInsuranceCompanyId(String insuranceCompanyId) { this.insuranceCompanyId = insuranceCompanyId; }

    public String getInsuranceCompanyName() { return insuranceCompanyName; }
    public void setInsuranceCompanyName(String insuranceCompanyName) { this.insuranceCompanyName = insuranceCompanyName; }

    public Boolean getConsentCommunication() { return consentCommunication; }
    public void setConsentCommunication(Boolean consentCommunication) { this.consentCommunication = consentCommunication; }

    public Boolean getConsentDataProcessing() { return consentDataProcessing; }
    public void setConsentDataProcessing(Boolean consentDataProcessing) { this.consentDataProcessing = consentDataProcessing; }

    public boolean isInsuranceValid() {
        return insuranceStatus == InsuranceStatus.ACTIVE && 
               kvnr != null && !kvnr.isEmpty();
    }
}

```

### File: ./src/main/java/de/his/patient/domain/model/Person.java
```java
package de.his.patient.domain.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "persons")
@Inheritance(strategy = InheritanceType.JOINED)
public class Person extends AbstractEntity {

    @NotNull
    @Column(name = "first_name", nullable = false, length = 100)
    private String firstName;

    @NotNull
    @Column(name = "last_name", nullable = false, length = 100)
    private String lastName;

    @Column(name = "title", length = 50)
    private String title;

    @Column(name = "birth_date")
    private LocalDate birthDate;

    @Enumerated(EnumType.STRING)
    @Column(name = "gender", length = 20)
    private Gender gender;

    @Column(name = "phone", length = 50)
    private String phone;

    @Column(name = "email", length = 100)
    private String email;

    @OneToMany(mappedBy = "person", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Address> addresses = new ArrayList<>();

    public Person() {}

    public Person(String firstName, String lastName, LocalDate birthDate, Gender gender) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.birthDate = birthDate;
        this.gender = gender;
    }

    // Getters and Setters
    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }

    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }

    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }

    public LocalDate getBirthDate() { return birthDate; }
    public void setBirthDate(LocalDate birthDate) { this.birthDate = birthDate; }

    public Gender getGender() { return gender; }
    public void setGender(Gender gender) { this.gender = gender; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public List<Address> getAddresses() { return addresses; }
    public void setAddresses(List<Address> addresses) { this.addresses = addresses; }

    public void addAddress(Address address) {
        address.setPerson(this);
        this.addresses.add(address);
    }

    public String getFullName() {
        StringBuilder fullName = new StringBuilder();
        if (title != null && !title.isEmpty()) {
            fullName.append(title).append(" ");
        }
        fullName.append(firstName).append(" ").append(lastName);
        return fullName.toString();
    }
}

```

### File: ./src/main/java/de/his/patient/domain/model/VSDMData.java
```java
package de.his.patient.domain.model;

public class VSDMData {
    private final String kvnr;
    private final InsuranceStatus insuranceStatus;
    private final String insuranceCompanyId;
    private final String insuranceCompanyName;
    private final String copaymentStatus;

    public VSDMData(String kvnr, InsuranceStatus insuranceStatus, 
                    String insuranceCompanyId, String insuranceCompanyName,
                    String copaymentStatus) {
        this.kvnr = kvnr;
        this.insuranceStatus = insuranceStatus;
        this.insuranceCompanyId = insuranceCompanyId;
        this.insuranceCompanyName = insuranceCompanyName;
        this.copaymentStatus = copaymentStatus;
    }

    // Getters
    public String getKvnr() { return kvnr; }
    public InsuranceStatus getInsuranceStatus() { return insuranceStatus; }
    public String getInsuranceCompanyId() { return insuranceCompanyId; }
    public String getInsuranceCompanyName() { return insuranceCompanyName; }
    public String getCopaymentStatus() { return copaymentStatus; }
}

```

### File: ./src/main/java/de/his/patient/domain/repository/PatientRepository.java
```java
package de.his.patient.domain.repository;

import de.his.patient.domain.model.Patient;
import de.his.patient.domain.model.InsuranceStatus;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository
public interface PatientRepository extends JpaRepository<Patient, UUID> {

    Optional<Patient> findByKvnrAndDeletedAtIsNull(String kvnr);

    @Query("SELECT p FROM Patient p WHERE " +
           "(LOWER(p.firstName) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR " +
           "LOWER(p.lastName) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR " +
           "p.kvnr LIKE CONCAT('%', :searchTerm, '%')) AND " +
           "p.deletedAt IS NULL")
    Page<Patient> searchPatients(@Param("searchTerm") String searchTerm, Pageable pageable);

    List<Patient> findByInsuranceStatusAndDeletedAtIsNull(InsuranceStatus status);

    @Query("SELECT COUNT(p) FROM Patient p WHERE p.deletedAt IS NULL")
    Long countActivePatients();
}

```

### File: ./src/main/java/de/his/patient/infrastructure/exception/DatabaseConnectionException.java
```java
package de.his.patient.infrastructure.exception;

public class DatabaseConnectionException extends RuntimeException {
    
    private final String operation;
    private final String details;

    public DatabaseConnectionException(String operation, String details, Throwable cause) {
        super(String.format("Database operation '%s' failed. Details: %s", operation, details), cause);
        this.operation = operation;
        this.details = details;
    }

    public DatabaseConnectionException(String operation, Throwable cause) {
        super(String.format("Database operation '%s' failed due to connection issues", operation), cause);
        this.operation = operation;
        this.details = "Connection timeout or network error";
    }

    public String getOperation() { return operation; }
    public String getDetails() { return details; }
}

```

### File: ./src/main/java/de/his/patient/infrastructure/exception/GlobalExceptionHandler.java
```java
package de.his.patient.infrastructure.exception;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.dao.OptimisticLockingFailureException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.validation.FieldError;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import org.springframework.web.servlet.resource.NoResourceFoundException;

import javax.naming.ServiceUnavailableException;
import java.sql.SQLException;
import java.sql.SQLTransientException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Umfassender Global Exception Handler für den Patient Service
 * 
 * Behandelt alle typischen Fehlerszenarien in Healthcare IT:
 * - Patientenspezifische Business Logic Errors
 * - Database/Persistence Layer Errors  
 * - Validation und Request Processing Errors
 * - Security und Authorization Errors
 * - Infrastructure und Service Availability Errors
 * - Spring Framework Errors
 */
@RestControllerAdvice
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    // =========================================================================
    // PATIENTENSPEZIFISCHE BUSINESS LOGIC EXCEPTIONS
    // =========================================================================

    @ExceptionHandler(PatientNotFoundException.class)
    public ResponseEntity<ErrorResponse> handlePatientNotFound(PatientNotFoundException ex) {
        logger.warn("Patient not found: {}", ex.getMessage());
        
        ErrorResponse error = new ErrorResponse(
            "PATIENT_NOT_FOUND",
            ex.getMessage(),
            "Verify patient ID/KVNR and ensure patient exists in system",
            LocalDateTime.now()
        );
        
        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(PatientAlreadyExistsException.class)
    public ResponseEntity<ErrorResponse> handlePatientAlreadyExists(PatientAlreadyExistsException ex) {
        logger.warn("Patient already exists: {}", ex.getMessage());
        
        ErrorResponse error = new ErrorResponse(
            "PATIENT_ALREADY_EXISTS",
            ex.getMessage(),
            "Use PUT endpoint to update existing patient or check for duplicate KVNR",
            LocalDateTime.now()
        );
        
        return new ResponseEntity<>(error, HttpStatus.CONFLICT);
    }

    @ExceptionHandler(PatientDeletedException.class)
    public ResponseEntity<ErrorResponse> handlePatientDeleted(PatientDeletedException ex) {
        logger.warn("Attempt to access deleted patient: {}", ex.getMessage());
        
        ErrorResponse error = new ErrorResponse(
            "PATIENT_DELETED",
            ex.getMessage(),
            "Contact administrator to restore patient or use archived patient endpoints",
            LocalDateTime.now()
        );
        
        return new ResponseEntity<>(error, HttpStatus.GONE);
    }

    @ExceptionHandler(InvalidKvnrException.class)
    public ResponseEntity<ErrorResponse> handleInvalidKvnr(InvalidKvnrException ex) {
        logger.warn("Invalid KVNR format: {}", ex.getMessage());
        
        ErrorResponse error = new ErrorResponse(
            "INVALID_KVNR_FORMAT",
            ex.getMessage(),
            "KVNR must be exactly 10 digits. Example: '1234567890'",
            LocalDateTime.now()
        );
        
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(PatientValidationException.class)
    public ResponseEntity<ErrorResponse> handlePatientValidation(PatientValidationException ex) {
        logger.warn("Patient validation failed: {}", ex.getMessage());
        
        ErrorResponse error = new ErrorResponse(
            "PATIENT_VALIDATION_ERROR",
            ex.getMessage(),
            "Check field requirements and data formats in API documentation",
            LocalDateTime.now()
        );
        
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }

    // =========================================================================
    // SECURITY UND AUTHORIZATION EXCEPTIONS
    // =========================================================================

    @ExceptionHandler(UnauthorizedPatientAccessException.class)
    public ResponseEntity<ErrorResponse> handleUnauthorizedAccess(UnauthorizedPatientAccessException ex) {
        logger.warn("Unauthorized patient access attempt: {}", ex.getMessage());
        
        ErrorResponse error = new ErrorResponse(
            "UNAUTHORIZED_PATIENT_ACCESS",
            ex.getMessage(),
            "Ensure user has proper permissions or contact administrator",
            LocalDateTime.now()
        );
        
        return new ResponseEntity<>(error, HttpStatus.FORBIDDEN);
    }

    // =========================================================================
    // DATABASE UND PERSISTENCE LAYER EXCEPTIONS
    // =========================================================================

    @ExceptionHandler(DatabaseConnectionException.class)
    public ResponseEntity<ErrorResponse> handleDatabaseConnection(DatabaseConnectionException ex) {
        logger.error("Database connection error: {}", ex.getMessage(), ex);
        
        ErrorResponse error = new ErrorResponse(
            "DATABASE_CONNECTION_ERROR",
            "Database operation failed due to connectivity issues",
            "Retry request in a few moments or contact system administrator",
            LocalDateTime.now()
        );
        
        return new ResponseEntity<>(error, HttpStatus.SERVICE_UNAVAILABLE);
    }

    @ExceptionHandler(PatientDataIntegrityException.class)
    public ResponseEntity<ErrorResponse> handleDataIntegrity(PatientDataIntegrityException ex) {
        logger.error("Data integrity violation: {}", ex.getMessage(), ex);
        
        ErrorResponse error = new ErrorResponse(
            "DATA_INTEGRITY_VIOLATION",
            ex.getMessage(),
            "Check for duplicate data or constraint violations",
            LocalDateTime.now()
        );
        
        return new ResponseEntity<>(error, HttpStatus.CONFLICT);
    }

    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<ErrorResponse> handleDataIntegrityViolation(DataIntegrityViolationException ex) {
        logger.error("Database constraint violation: {}", ex.getMessage(), ex);
        
        String userMessage = "Database constraint violation occurred";
        String developerHint = "Check database logs for constraint details";
        
        // Analyze specific constraint violations
        String rootMessage = ex.getRootCause() != null ? ex.getRootCause().getMessage() : ex.getMessage();
        
        if (rootMessage != null) {
            if (rootMessage.contains("unique") || rootMessage.contains("UNIQUE")) {
                userMessage = "Duplicate data detected - record already exists";
                developerHint = "Check for duplicate KVNR, email, or other unique fields";
            } else if (rootMessage.contains("foreign key") || rootMessage.contains("FOREIGN KEY")) {
                userMessage = "Referenced data not found";
                developerHint = "Ensure all referenced entities exist before creating patient";
            } else if (rootMessage.contains("not null") || rootMessage.contains("NOT NULL")) {
                userMessage = "Required field is missing";
                developerHint = "Check that all mandatory fields are provided";
            }
        }
        
        ErrorResponse error = new ErrorResponse(
            "DATABASE_CONSTRAINT_VIOLATION",
            userMessage,
            developerHint,
            LocalDateTime.now()
        );
        
        return new ResponseEntity<>(error, HttpStatus.CONFLICT);
    }

    // =========================================================================
    // VALIDATION UND REQUEST PROCESSING EXCEPTIONS
    // =========================================================================

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ErrorResponse> handleValidationErrors(MethodArgumentNotValidException ex) {
        logger.warn("Request validation failed: {}", ex.getMessage());
        
        Map<String, String> fieldErrors = new HashMap<>();
        for (FieldError error : ex.getBindingResult().getFieldErrors()) {
            fieldErrors.put(error.getField(), error.getDefaultMessage());
        }
        
        String detailedMessage = fieldErrors.entrySet().stream()
            .map(entry -> String.format("%s: %s", entry.getKey(), entry.getValue()))
            .collect(Collectors.joining("; "));
        
        ErrorResponse error = new ErrorResponse(
            "VALIDATION_ERROR",
            "Request validation failed: " + detailedMessage,
            "Check field requirements in API documentation",
            LocalDateTime.now()
        );
        
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(HttpMessageNotReadableException.class)
    public ResponseEntity<ErrorResponse> handleInvalidJson(HttpMessageNotReadableException ex) {
        logger.warn("Invalid JSON in request: {}", ex.getMessage());
        
        String userMessage = "Invalid JSON format in request body";
        String developerHint = "Check JSON syntax and field types";
        
        // Try to provide more specific error info
        Throwable cause = ex.getCause();
        if (cause != null && cause.getMessage() != null) {
            String causeMessage = cause.getMessage();
            if (causeMessage.contains("Unexpected character")) {
                userMessage = "JSON syntax error - unexpected character";
            } else if (causeMessage.contains("Cannot deserialize")) {
                userMessage = "JSON field type mismatch";
                developerHint = "Check that field types match expected values (string, number, boolean)";
            }
        }
        
        ErrorResponse error = new ErrorResponse(
            "INVALID_JSON_FORMAT",
            userMessage,
            developerHint,
            LocalDateTime.now()
        );
        
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }

    // =========================================================================
    // FALLBACK EXCEPTION HANDLER
    // =========================================================================

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleGenericException(Exception ex) {
        logger.error("Unexpected error occurred: {}", ex.getMessage(), ex);
        
        ErrorResponse error = new ErrorResponse(
            "INTERNAL_SERVER_ERROR",
            "An unexpected error occurred while processing your request",
            "Check application logs for detailed error information",
            LocalDateTime.now()
        );
        
        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    // =========================================================================
    // ERROR RESPONSE DTO
    // =========================================================================

    public static class ErrorResponse {
        private String code;
        private String message;
        private String developerHint;
        private LocalDateTime timestamp;

        public ErrorResponse(String code, String message, String developerHint, LocalDateTime timestamp) {
            this.code = code;
            this.message = message;
            this.developerHint = developerHint;
            this.timestamp = timestamp;
        }

        // Getters and Setters
        public String getCode() { return code; }
        public void setCode(String code) { this.code = code; }

        public String getMessage() { return message; }
        public void setMessage(String message) { this.message = message; }

        public String getDeveloperHint() { return developerHint; }
        public void setDeveloperHint(String developerHint) { this.developerHint = developerHint; }

        public LocalDateTime getTimestamp() { return timestamp; }
        public void setTimestamp(LocalDateTime timestamp) { this.timestamp = timestamp; }
    }
}

```

### File: ./src/main/java/de/his/patient/infrastructure/exception/InvalidKvnrException.java
```java
package de.his.patient.infrastructure.exception;

public class InvalidKvnrException extends RuntimeException {
    
    private final String kvnr;
    private final String validationError;

    public InvalidKvnrException(String kvnr, String validationError) {
        super(String.format("Invalid KVNR '%s': %s. KVNR must be exactly 10 digits", kvnr, validationError));
        this.kvnr = kvnr;
        this.validationError = validationError;
    }

    public String getKvnr() { return kvnr; }
    public String getValidationError() { return validationError; }
}

```

### File: ./src/main/java/de/his/patient/infrastructure/exception/PatientAlreadyExistsException.java
```java
package de.his.patient.infrastructure.exception;

public class PatientAlreadyExistsException extends RuntimeException {
    public PatientAlreadyExistsException(String kvnr) {
        super("Patient with KVNR already exists: " + kvnr);
    }
}

```

### File: ./src/main/java/de/his/patient/infrastructure/exception/PatientDataIntegrityException.java
```java
package de.his.patient.infrastructure.exception;

public class PatientDataIntegrityException extends RuntimeException {
    
    private final String constraint;
    private final String conflictingData;

    public PatientDataIntegrityException(String constraint, String conflictingData, Throwable cause) {
        super(String.format("Data integrity violation in constraint '%s'. Conflicting data: %s", 
              constraint, conflictingData), cause);
        this.constraint = constraint;
        this.conflictingData = conflictingData;
    }

    public String getConstraint() { return constraint; }
    public String getConflictingData() { return conflictingData; }
}

```

### File: ./src/main/java/de/his/patient/infrastructure/exception/PatientDeletedException.java
```java
package de.his.patient.infrastructure.exception;

import java.time.LocalDateTime;

public class PatientDeletedException extends RuntimeException {
    
    private final String patientId;
    private final LocalDateTime deletedAt;
    private final String deletedBy;

    public PatientDeletedException(String patientId, LocalDateTime deletedAt, String deletedBy) {
        super(String.format("Patient '%s' was soft-deleted on %s by user '%s'. " +
              "Use restore endpoint to reactivate or contact administrator", 
              patientId, deletedAt, deletedBy));
        this.patientId = patientId;
        this.deletedAt = deletedAt;
        this.deletedBy = deletedBy;
    }

    public String getPatientId() { return patientId; }
    public LocalDateTime getDeletedAt() { return deletedAt; }
    public String getDeletedBy() { return deletedBy; }
}

```

### File: ./src/main/java/de/his/patient/infrastructure/exception/PatientNotFoundException.java
```java
package de.his.patient.infrastructure.exception;

public class PatientNotFoundException extends RuntimeException {
    public PatientNotFoundException(String identifier) {
        super("Patient not found: " + identifier);
    }
}

```

### File: ./src/main/java/de/his/patient/infrastructure/exception/PatientServiceUnavailableException.java
```java
package de.his.patient.infrastructure.exception;

public class PatientServiceUnavailableException extends RuntimeException {
    
    private final String serviceComponent;
    private final String estimatedRecoveryTime;

    public PatientServiceUnavailableException(String serviceComponent, String estimatedRecoveryTime, Throwable cause) {
        super(String.format("Patient service component '%s' is temporarily unavailable. " +
              "Estimated recovery: %s", serviceComponent, estimatedRecoveryTime), cause);
        this.serviceComponent = serviceComponent;
        this.estimatedRecoveryTime = estimatedRecoveryTime;
    }

    public String getServiceComponent() { return serviceComponent; }
    public String getEstimatedRecoveryTime() { return estimatedRecoveryTime; }
}

```

### File: ./src/main/java/de/his/patient/infrastructure/exception/PatientValidationException.java
```java
package de.his.patient.infrastructure.exception;

public class PatientValidationException extends RuntimeException {
    
    private final String field;
    private final String rejectedValue;
    private final String reason;

    public PatientValidationException(String field, String rejectedValue, String reason) {
        super(String.format("Invalid value for field '%s': '%s'. Reason: %s", field, rejectedValue, reason));
        this.field = field;
        this.rejectedValue = rejectedValue;
        this.reason = reason;
    }

    public PatientValidationException(String message) {
        super(message);
        this.field = null;
        this.rejectedValue = null;
        this.reason = null;
    }

    public String getField() { return field; }
    public String getRejectedValue() { return rejectedValue; }
    public String getReason() { return reason; }
}

```

### File: ./src/main/java/de/his/patient/infrastructure/exception/UnauthorizedPatientAccessException.java
```java
package de.his.patient.infrastructure.exception;

public class UnauthorizedPatientAccessException extends RuntimeException {
    
    private final String requestedPatientId;
    private final String accessingUser;
    private final String requiredPermission;

    public UnauthorizedPatientAccessException(String requestedPatientId, String accessingUser, String requiredPermission) {
        super(String.format("User '%s' is not authorized to access patient '%s'. Required permission: %s", 
              accessingUser, requestedPatientId, requiredPermission));
        this.requestedPatientId = requestedPatientId;
        this.accessingUser = accessingUser;
        this.requiredPermission = requiredPermission;
    }

    public String getRequestedPatientId() { return requestedPatientId; }
    public String getAccessingUser() { return accessingUser; }
    public String getRequiredPermission() { return requiredPermission; }
}

```

### File: ./src/main/java/de/his/patient/PatientServiceApplication.java
```java
package de.his.patient;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class PatientServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(PatientServiceApplication.class, args);
    }
}

```

### File: ./src/main/java/de/his/patient/presentation/controller/PatientController.java
```java
package de.his.patient.presentation.controller;

import de.his.patient.application.dto.*;
import de.his.patient.application.service.PatientService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
@RequestMapping("/api/v1/patients")
@Tag(name = "Patients", description = "Patient Management API")
public class PatientController {

    private final PatientService patientService;

    public PatientController(PatientService patientService) {
        this.patientService = patientService;
    }

    @PostMapping
    @Operation(summary = "Create new patient", description = "Creates a new patient with VSDM-compliant data")
    public ResponseEntity<PatientResponse> createPatient(
            @Valid @RequestBody CreatePatientRequest request) {

        PatientResponse response = patientService.createPatient(request);
        return new ResponseEntity<>(response, HttpStatus.CREATED);
    }

    @GetMapping("/{patientId}")
    @Operation(summary = "Get patient details", description = "Retrieves detailed patient information")
    public ResponseEntity<PatientResponse> getPatient(
            @Parameter(description = "Patient ID") @PathVariable UUID patientId) {

        PatientResponse response = patientService.getPatient(patientId);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/kvnr/{kvnr}")
    @Operation(summary = "Get patient by KVNR", description = "Retrieves patient by Krankenversichertennummer")
    public ResponseEntity<PatientResponse> getPatientByKvnr(
            @Parameter(description = "Krankenversichertennummer") @PathVariable String kvnr) {

        PatientResponse response = patientService.getPatientByKvnr(kvnr);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/search")
    @Operation(summary = "Search patients", description = "Search patients by name or KVNR")
    public ResponseEntity<Page<PatientSummary>> searchPatients(
            @RequestParam String searchTerm,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {

        Pageable pageable = PageRequest.of(page, size);
        Page<PatientSummary> patients = patientService.searchPatients(searchTerm, pageable);
        return ResponseEntity.ok(patients);
    }

    @DeleteMapping("/{patientId}")
    @Operation(summary = "Delete patient", description = "Soft deletes a patient")
    public ResponseEntity<Void> deletePatient(
            @Parameter(description = "Patient ID") @PathVariable UUID patientId) {

        patientService.deletePatient(patientId);
        return ResponseEntity.noContent().build();
    }
}

```

### File: ./src/test/java/de/his/patient/application/service/PatientServiceTest.java
```java

```

### File: ./src/test/java/de/his/patient/domain/model/PatientTest.java
```java

```

### File: ./src/test/java/de/his/patient/integration/PatientIntegrationTest.java
```java

```

### File: ./src/main/resources/application-dev.yml
```yml
server:
  port: 8081

spring:
  application:
    name: patient-service

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://postgres:5432/his_patient
    username: his_user
    password: dev_password

  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true

  h2:
    console:
      enabled: false # H2 Console deaktivieren

  liquibase:
    enabled: false # Liquibase deaktivieren für Development

  security:
    user:
      name: admin
      password: dev-password
      roles: ADMIN

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

logging:
  level:
    de.his.patient: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

```

### File: ./src/main/resources/application-docker-minimal.yml
```yml
spring:
  application:
    name: patient-service

  # PostgreSQL Configuration
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://postgres:5432/his_db
    username: his_user
    password: dev_password
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 20
      minimum-idle: 5

  # JPA/Hibernate for PostgreSQL
  jpa:
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        default_schema: his_patient

  # Disable H2 Console
  h2:
    console:
      enabled: false

  # Security
  security:
    user:
      name: admin
      password: dev-password
      roles: ADMIN

server:
  port: 8081

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

logging:
  level:
    de.his.patient: DEBUG
    org.hibernate.SQL: DEBUG
    root: INFO

```

### File: ./src/main/resources/application-docker.yml
```yml
server:
  port: 8081

spring:
  application:
    name: patient-service

  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres:5432/his_patient}
    username: ${SPRING_DATASOURCE_USERNAME:his_user}
    password: ${SPRING_DATASOURCE_PASSWORD:dev_password}

  jpa:
    hibernate:
      ddl-auto: update # create-drop → update (weniger aggressiv)
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        hbm2ddl:
          auto: update
    show-sql: false
    defer-datasource-initialization: true

  sql:
    init:
      mode: never # Schema-Initialisierung deaktivieren

  liquibase:
    enabled: false

  security:
    user:
      name: admin
      password: dev-password
      roles: ADMIN

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

logging:
  level:
    de.his.patient: INFO
    org.springframework.security: INFO
    org.hibernate.SQL: DEBUG # SQL-Debugging aktivieren
    org.hibernate.type: TRACE # Parameter-Debugging
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/patient-service.log
    max-size: 100MB
    max-history: 30

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

```

### File: ./src/main/resources/application.yml
```yml
server:
  port: 8081 # Auf Port 8080 ändern

spring:
  application:
    name: patient-service

  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    database-platform: org.hibernate.dialect.H2Dialect

  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true

  liquibase:
    enabled: false # Liquibase deaktivieren für lokale H2

  security:
    user:
      name: admin
      password: dev-password
      roles: ADMIN

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

logging:
  level:
    de.his.patient: DEBUG
    org.springframework.security: DEBUG

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

```

### File: ./.mvn/wrapper/maven-wrapper.properties
```properties
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.11/apache-maven-3.9.11-bin.zip

```

### File: ./src/main/resources/liquibase.properties
```properties
# Liquibase configuration for Patient Service
changeLogFile=src/main/resources/db/changelog/db.changelog-master.xml
url=jdbc:postgresql://localhost:5433/his_patients
username=patient_user
password=dev_password
driver=org.postgresql.Driver

```

### File: ./pom.xml
```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>de.his</groupId>
    <artifactId>his-patient-service</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.0</version>
        <relativePath/>
    </parent>

    <properties>
        <java.version>21</java.version>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <spring-cloud.version>2023.0.1</spring-cloud.version>
    </properties>

    <dependencies>
        <!-- WEB STARTER - KRITISCH HINZUGEFÜGT! -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

```

### File: ./src/main/resources/db/changelog/001-create-persons-table.xml
```xml

```

### File: ./src/main/resources/db/changelog/002-create-patients-table.xml
```xml

```

### File: ./src/main/resources/db/changelog/003-create-addresses-table.xml
```xml

```

### File: ./src/main/resources/db/changelog/004-create-indexes.xml
```xml

```

### File: ./src/main/resources/db/changelog/db.changelog-master.xml
```xml

```

### File: ./Dockerfile
```dockerfile
FROM eclipse-temurin:21-jdk AS build
WORKDIR /app

# Cache Maven dependencies
COPY pom.xml .
COPY .mvn .mvn
COPY mvnw .
RUN ./mvnw dependency:go-offline -B

# Build application
COPY src src
RUN ./mvnw package -DskipTests

# Runtime stage
FROM eclipse-temurin:21-jre
WORKDIR /app

# Create non-root user
RUN groupadd -g 1001 appgroup && \
    useradd -r -u 1001 -g appgroup appuser

# Copy application
COPY --from=build /app/target/*.jar app.jar

# Set ownership
RUN chown appuser:appgroup app.jar

# Switch to non-root user
USER appuser

# Health check - KORRIGIERTER PORT!
HEALTHCHECK --interval=30s --timeout=3s --start-period=15s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8081/actuator/health || exit 1

# KORRIGIERTER PORT!
EXPOSE 8081

# KORRIGIERTES ENTRYPOINT!
ENTRYPOINT ["java", "-jar", "app.jar"]

```

