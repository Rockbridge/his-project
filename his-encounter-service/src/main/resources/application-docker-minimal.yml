spring:
  application:
    name: encounter-service

  # PostgreSQL Connection - KORRIGIERT für einheitliche DB
  datasource:
    url: jdbc:postgresql://postgres:5432/his_db
    username: his_user
    password: dev_password
    driver-class-name: org.postgresql.Driver
    # Connection Pool Optimierung
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 60000

  # JPA/Hibernate Configuration
  jpa:
    # ✅ KRITISCHER FIX: PostgreSQL statt H2 Dialect
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      # ✅ FIX: update statt create-drop (behält Daten bei Restart)
      ddl-auto: update
      # ✅ FIX: Naming Strategy für PostgreSQL
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    # SQL Logging für Debugging (kann später deaktiviert werden)
    show-sql: true
    properties:
      hibernate:
        # ✅ FIX: Schema explizit definiert - KORRIGIERT auf his_encounter
        default_schema: his_encounter
        # SQL Formatierung für bessere Lesbarkeit
        format_sql: true
        # PostgreSQL-spezifische Optimierungen
        jdbc:
          lob:
            non_contextual_creation: true
          batch_size: 20
        # Performance Optimierung
        cache:
          use_second_level_cache: false
          use_query_cache: false

  # ✅ KRITISCHER FIX: Security Configuration hinzugefügt
  security:
    user:
      name: admin
      password: dev-password
      roles: ADMIN

  # Disable H2 Console explizit
  h2:
    console:
      enabled: false

# Feign Client Configuration
services:
  patient:
    url: http://patient-service:8081

feign:
  client:
    config:
      default:
        connect-timeout: 5000
        read-timeout: 10000
        logger-level: full

# Logging Configuration
logging:
  level:
    # Hibernate SQL Logging (für Debugging)
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    # HikariCP Connection Pool Logging
    com.zaxxer.hikari.HikariConfig: DEBUG
    com.zaxxer.hikari: INFO
    # Feign Client Logging
    org.springframework.cloud.openfeign: DEBUG
    feign: DEBUG
    # Application Specific Logging
    de.his.encounter: DEBUG
    # Root Logger (kann auf INFO gestellt werden in Production)
    root: INFO

# Management Endpoints (Actuator)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,configprops,loggers,mappings
  endpoint:
    health:
      show-details: always
      show-components: always
    info:
      env:
        enabled: true

# Server Configuration - KORRIGIERT auf Port 8082
server:
  port: 8082
  servlet:
    context-path: /
  tomcat:
    threads:
      max: 200
      min-spare: 10
